window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "bsplyne", "modulename": "bsplyne", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bsplyne.b_spline", "modulename": "bsplyne.b_spline", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bsplyne.b_spline.BSpline", "modulename": "bsplyne.b_spline", "qualname": "BSpline", "kind": "class", "doc": "<p>B-Spline from a <code>NPa</code>-D parametric space into a NPh-D physical space.\nNPh is not an attribute of this class.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>NPa</strong> (int):\nParametric space dimension.</li>\n<li><strong>bases</strong> (numpy.array of BSplineBasis):\n<code>numpy</code>.<code>array</code> containing a <code>BSplineBasis</code> instance for each of the \n<code>NPa</code> axis of the parametric space.</li>\n</ul>\n"}, {"fullname": "bsplyne.b_spline.BSpline.__init__", "modulename": "bsplyne.b_spline", "qualname": "BSpline.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>degrees</strong> (numpy.array of int):\nContains the degrees of the B-spline in each parametric dimension.</li>\n<li><strong>knots</strong> (list of numpy.array of float):\nContains the knot vectors of the B-spline for each parametric \ndimension.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>BSpline</strong> (BSpline instance):\nContains the <code>BSpline</code> object created.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Creation of a 2D shape as a <code>BSpline</code> instance :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">             np.array([0, 0, 0, 0.5, 1, 1, 1], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"p\">,</span> <span class=\"n\">knots</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">degrees</span>, </span><span class=\"param\"><span class=\"n\">knots</span></span>)</span>"}, {"fullname": "bsplyne.b_spline.BSpline.from_bases", "modulename": "bsplyne.b_spline", "qualname": "BSpline.from_bases", "kind": "function", "doc": "<p>Create a <code>BSpline</code> instance from an array of <code>BSplineBasis</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bases</strong> (numpy.ndarray of BSplineBasis):\nThe array of <code>BSplineBasis</code> instances.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>BSpline</strong>: Contains the <code>BSpline</code> object created.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">bases</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.getDegrees", "modulename": "bsplyne.b_spline", "qualname": "BSpline.getDegrees", "kind": "function", "doc": "<p>Returns the degree of each basis in the parametric space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>degrees</strong> (numpy.array of int):\nContains the degrees of the B-spline.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">             np.array([0, 0, 0, 0.5, 1, 1, 1], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span> <span class=\"o\">=</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"p\">,</span> <span class=\"n\">knots</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span><span class=\"o\">.</span><span class=\"n\">getDegrees</span><span class=\"p\">()</span>\n<span class=\"go\">array([2, 2])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.getKnots", "modulename": "bsplyne.b_spline", "qualname": "BSpline.getKnots", "kind": "function", "doc": "<p>Returns the knot vector of each basis in the parametric space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>knots</strong> (list of numpy.array of float):\nContains the knot vectors of the B-spline.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">             np.array([0, 0, 0, 0.5, 1, 1, 1], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span> <span class=\"o\">=</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"p\">,</span> <span class=\"n\">knots</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span><span class=\"o\">.</span><span class=\"n\">getKnots</span><span class=\"p\">()</span>\n<span class=\"go\">[array([0. , 0. , 0. , 0.5, 1. , 1. , 1. ]),</span>\n<span class=\"go\"> array([0. , 0. , 0. , 0.5, 1. , 1. , 1. ])]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.getNbFunc", "modulename": "bsplyne.b_spline", "qualname": "BSpline.getNbFunc", "kind": "function", "doc": "<p>Compute the number of basis functions of the spline.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: Number of basis functions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.getSpans", "modulename": "bsplyne.b_spline", "qualname": "BSpline.getSpans", "kind": "function", "doc": "<p>Return the span of each basis in the parametric space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>spans</strong> (list of tuple(float, float)):\nContains the span of the B-spline.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.linspace", "modulename": "bsplyne.b_spline", "qualname": "BSpline.linspace", "kind": "function", "doc": "<p>Generate <code>NPa</code> sets of xi values over the span of each basis.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_eval_per_elem</strong> (numpy.array of int or int, optional):\nNumber of values per element over each parametric axis, by default 10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>XI</strong> (tuple of numpy.array of float):\nSet of xi values over each span.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_eval_per_elem</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.linspace_for_integration", "modulename": "bsplyne.b_spline", "qualname": "BSpline.linspace_for_integration", "kind": "function", "doc": "<p>Generate <code>NPa</code> sets of xi values over the span of the basis, \ncenterered on intervals of returned lengths.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_eval_per_elem</strong> (numpy.array of int or int, optional):\nNumber of values per element over each parametric axis, by default 10</li>\n<li><strong>bounding_box</strong> (numpy.array of float , optional):\nLower and upper bounds on each axis, by default [[xi0, xin], [eta0, etan], ...]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>XI</strong> (tuple of numpy.array of float):\nSet of xi values over each span.</li>\n<li><strong>dXI</strong> (tuple of numpy.array of float):\nSet of integration weight of each point in <code>XI</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_eval_per_elem</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">bounding_box</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.DN", "modulename": "bsplyne.b_spline", "qualname": "BSpline.DN", "kind": "function", "doc": "<p>Compute the <code>k</code>-th derivative of the B-spline basis at the points \nin the parametric space given as input such that a dot product \nwith the reshaped and transposed control points evaluates the \nB-spline.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>XI</strong> (numpy.array of float or tuple of numpy.array of float):\nIf <code>numpy</code>.<code>array</code> of <code>float</code>, contains the <code>NPa</code>-uplets of \nparametric coordinates as [[xi_0, ...], [eta_a, ...], ...].\nElse, if <code>tuple</code> of <code>numpy</code>.<code>array</code> of <code>float</code>, contains the <code>NPa</code> \nparametric coordinates as [[xi_0, ...], [eta_0, ...], ...].</li>\n<li><strong>k</strong> (list of int or int, optional):\nIf <code>numpy</code>.<code>array</code> of <code>int</code>, or if k is 0, compute the <code>k</code>-th \nderivative of the B-spline basis evaluated on each axis of the \nparametric space.\nIf <code>int</code>, compute the <code>k</code>-th derivative along every axis. For \nexample, if <code>k</code> is 1, compute the gradient, if <code>k</code> is 2, compute \nthe hessian, and so on.\n, by default 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DN</strong> (scipy.sparse.csr_matrix of float or numpy.array of scipy.sparse.csr_matrix of float):\nContains the basis of the B-spline.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Evaluation of a 2D BSpline basis on these <code>XI</code> values : [[0, 0.5], [1, 0]]</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">             np.array([0, 0, 0, 0.5, 1, 1, 1], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span> <span class=\"o\">=</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"p\">,</span> <span class=\"n\">knots</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">XI</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span><span class=\"o\">.</span><span class=\"n\">DN</span><span class=\"p\">(</span><span class=\"n\">XI</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"go\">array([[0. , 0. , 0. , 1. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. , 0. ],</span>\n<span class=\"go\">       [0. , 0. , 0. , 0. , 0.5, 0. , 0. , 0. , 0.5, 0. , 0. , 0. , 0. , 0. , 0. , 0. ]])</span>\n</code></pre>\n</div>\n\n<p>Evaluation of the 2D BSpline basis's derivative along the first axis :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">XI</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">          np.array([1], dtype=&#39;float&#39;))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span><span class=\"o\">.</span><span class=\"n\">DN</span><span class=\"p\">(</span><span class=\"n\">XI</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"go\">array([[ 0., -0., -0., -4.,  0.,  0.,  0.,  4.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0., -2.,  0.,  0.,  0.,  2.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">XI</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.knotInsertion", "modulename": "bsplyne.b_spline", "qualname": "BSpline.knotInsertion", "kind": "function", "doc": "<p>Add the knots passed in parameter to the knot vector and modify the \nattributes so that the evaluation of the spline stays the same.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ctrlPts</strong> (numpy.array of float):\nContains the control points of the B-spline as [X, Y, Z, ...].\nIts shape : (NPh, nb elem for dim 1, ..., nb elem for dim <code>NPa</code>)</li>\n<li><strong>knots_to_add</strong> (list of np.array of float):\nContains the knots to add. It must not contain knots outside of \nthe old knot vector's interval.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ctrlPts</strong> (numpy.array of float):\nContains the control points of the B-spline as [X, Y, Z, ...].\nIts shape : (NPh, nb elem for dim 1, ..., nb elem for dim <code>NPa</code>)</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Knot insertion on a 2D BSpline in a 3D space :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">             np.array([0, 0, 0, 0.5, 1, 1, 1], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctrlPts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span> <span class=\"o\">=</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"p\">,</span> <span class=\"n\">knots</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots_to_add</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">                    np.array([], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctrlPts</span> <span class=\"o\">=</span> <span class=\"n\">pline</span><span class=\"o\">.</span><span class=\"n\">knotInsertion</span><span class=\"p\">(</span><span class=\"n\">ctrlPts</span><span class=\"p\">,</span> <span class=\"n\">knots_to_add</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrlPts</span>, </span><span class=\"param\"><span class=\"n\">knots_to_add</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.orderElevation", "modulename": "bsplyne.b_spline", "qualname": "BSpline.orderElevation", "kind": "function", "doc": "<p>Performs the order elevation algorithm on every B-spline basis and \napply the changes to the control points of the B-spline.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ctrlPts</strong> (numpy.array of float):\nContains the control points of the B-spline as [X, Y, Z, ...].\nIts shape : (NPh, nb elem for dim 1, ..., nb elem for dim <code>NPa</code>)</li>\n<li><strong>t</strong> (numpy.array of int):\nNew degree of each B-spline basis will be its current degree plus \nthe value of <code>t</code> corresponding.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ctrlPts</strong> (numpy.array of float):\nContains the control points of the B-spline as [X, Y, Z, ...].\nIts shape : (NPh, nb elem for dim 1, ..., nb elem for dim <code>NPa</code>)</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Order elevation on a 2D BSpline in a 3D space :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">             np.array([0, 0, 0, 0.5, 1, 1, 1], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctrlPts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span> <span class=\"o\">=</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"p\">,</span> <span class=\"n\">knots</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctrlPts</span> <span class=\"o\">=</span> <span class=\"n\">spline</span><span class=\"o\">.</span><span class=\"n\">knotInsertion</span><span class=\"p\">(</span><span class=\"n\">ctrlPts</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ctrlPts</span>, </span><span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.greville_abscissa", "modulename": "bsplyne.b_spline", "qualname": "BSpline.greville_abscissa", "kind": "function", "doc": "<p>Compute the Greville abscissa.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>return_weights</strong> (bool, optional):\nIf <code>True</code>, return the weight, the length of the span of the basis \nfunction corresponding to each abscissa, by default <code>False</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>greville</strong> (list of np.array of float):\nGreville abscissa on each parametric axis.</li>\n<li><strong>weights</strong> (list of np.array of float):\nSpan of each basis function on each parametric axis.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">return_weights</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline.BSpline.saveParaview", "modulename": "bsplyne.b_spline", "qualname": "BSpline.saveParaview", "kind": "function", "doc": "<p>Saves a plot as a set of .vtu files with a .pvd file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ctrlPts</strong> (numpy.array of float):\nContains the control points of the B-spline as [X, Y, Z, ...].\nIts shape : (NPh, nb elem for dim 1, ..., nb elem for dim <code>NPa</code>)</li>\n<li><strong>path</strong> (string):\nPath of the directory in which all the files to show in Paraview \nwill be dumped.</li>\n<li><strong>name</strong> (string):\nPrefix of the files created.</li>\n<li><strong>n_step</strong> (int):\nNumber of time steps to plot.</li>\n<li><strong>n_eval_per_elem</strong> (numpy.array of int or int, default 10):\nContains the number of evaluation of the B-spline in each \ndirection of the parametric space for each element.</li>\n<li><strong>fields</strong> (dict of function or of numpy.array of float, default None):\nFields to plot at each time step. The name of the field will \nbe the dict key. \nIf the value given is a <code>function</code>, it must take the spline \nand a <code>tuple</code> of parametric points that could be given to \n<code>self</code>.<code>DN</code> for example. It must return its value for \neach time step and on each combination of parametric points.\n<code>function</code>(<code>BSpline</code> spline, \n           <code>tuple</code>(<code>numpy</code>.<code>array</code> of <code>float</code>) XI) \n-> <code>numpy</code>.<code>array</code> of <code>float</code> of shape \n(<code>n_step</code>, nb combinations of XI, size for paraview)\nIf the value given is a <code>numpy</code>.<code>array</code> of <code>float</code>, the \nshape must be :\n(<code>n_step</code>, size for paraview, *<code>ctrlPts</code>.<code>shape</code>[1:])</li>\n<li><strong>groups</strong> (dict of dict, default None):\n<code>dict</code> (out) of <code>dict</code> (in) as :\n<ul>\n<li>(out) : \n<ul>\n<li>\"interior\" : (in) type of <code>dict</code>, </li>\n<li>\"elements_borders\" : (in) type of <code>dict</code>, </li>\n<li>\"control_points\" : (in) type of <code>dict</code>.</li>\n<li>other keys from the input that are not checked</li>\n</ul></li>\n<li>(in) : \n<ul>\n<li>\"ext\" : name of the extention of the group, </li>\n<li>\"npart\" : number of parts to plot together,</li>\n<li>\"nstep\" : number of time steps.</li>\n</ul></li>\n</ul></li>\n<li><strong>make_pvd</strong> (bool, default True):\nIf True, create a PVD file for all the data in <code>groups</code>.</li>\n<li><strong>verbose</strong> (bool, default True):\nIf True, print the advancement state to the standard output.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>groups</strong> (dict of dict):\n<code>dict</code> (out) of <code>dict</code> (in) as :\n<ul>\n<li>(out) : \n<ul>\n<li>\"interior\" : (in) type of <code>dict</code>, </li>\n<li>\"elements_borders\" : (in) type of <code>dict</code>, </li>\n<li>\"control_points\" : (in) type of <code>dict</code>.</li>\n<li>other keys from the input that are not checked</li>\n</ul></li>\n<li>(in) : \n<ul>\n<li>\"ext\" : name of the extention of the group, </li>\n<li>\"npart\" : number of parts to plot together,</li>\n<li>\"nstep\" : number of time steps.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Save a 2D BSpline in a 3D space in the file file.pvd at the \nlocation /path/to/file :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">degrees</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">knots</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> \n<span class=\"go\">             np.array([0, 0, 0, 0.5, 1, 1, 1], dtype=&#39;float&#39;)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ctrlPts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span> <span class=\"o\">=</span> <span class=\"n\">BSpline</span><span class=\"p\">(</span><span class=\"n\">degrees</span><span class=\"p\">,</span> <span class=\"n\">knots</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">spline</span><span class=\"o\">.</span><span class=\"n\">saveParaview</span><span class=\"p\">(</span><span class=\"n\">ctrlPts</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/path/to/file&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ctrlPts</span>,</span><span class=\"param\">\t<span class=\"n\">path</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">n_step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_eval_per_elem</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">make_pvd</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline_basis", "modulename": "bsplyne.b_spline_basis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis", "kind": "class", "doc": "<p>BSpline basis in 1D.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>p</strong> (int):\nDegree of the polynomials composing the basis.</li>\n<li><strong>knot</strong> (numpy.array of float):\nKnot vector of the BSpline.</li>\n<li><strong>m</strong> (int):\nLast index of the knot vector.</li>\n<li><strong>n</strong> (int):\nLast index of the basis : when evaluated, returns an array of size \n<code>n</code> + 1.</li>\n<li><strong>span</strong> (tuple of 2 float):\nInterval of definition of the basis.</li>\n</ul>\n"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis.__init__", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis.__init__", "kind": "function", "doc": "<p>Create a <code>BSplineBasis</code> object that can compute its basis, and the \nderivatives of these functions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>p</strong> (int):\nDegree of the BSpline.</li>\n<li><strong>knot</strong> (numpy.array of float):\nKnot vector of the BSpline.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>BSplineBasis</strong> (BSplineBasis instance):\nContains the <code>BSplineBasis</code> object created.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Creation of a <code>BSplineBasis</code> instance of degree 2 and knot vector \n[0, 0, 0, 1, 1, 1] :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">BSplineBasis</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p</span>, </span><span class=\"param\"><span class=\"n\">knot</span></span>)</span>"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis.linspace", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis.linspace", "kind": "function", "doc": "<p>Generate a set of xi values over the span of the basis.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_eval_per_elem</strong> (int, optional):\nNumber of values per element, by default 10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.array of float</strong>: Set of xi values over the span.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_eval_per_elem</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis.linspace_for_integration", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis.linspace_for_integration", "kind": "function", "doc": "<p>Generate a set of xi values over the span of the basis, centerered \non intervals of returned lengths.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_eval_per_elem</strong> (int, optional):\nNumber of values per element, by default 10</li>\n<li><strong>bounding_box</strong> (numpy.array of float, optional):\nLower and upper bounds, by default <code>self</code>.<code>span</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>xi</strong> (numpy.array of float):\nSet of xi values over the span.</li>\n<li><strong>dxi</strong> (numpy.array of float):\nIntegration weight of each point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_eval_per_elem</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">bounding_box</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis.N", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis.N", "kind": "function", "doc": "<p>Compute the <code>k</code>-th derivative of the BSpline basis functions for a set \nof values in the parametric space.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>XI</strong> (numpy.array of float):\nValues in the parametric space at which the BSpline is evaluated.</li>\n<li><strong>k</strong> (int, optional):\n<code>k</code>-th derivative of the BSpline evaluated. The default is 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DN</strong> (scipy.sparse.coo_matrix of float):\nSparse matrix containing the values of the <code>k</code>-th derivative of the \nBSpline basis functions in the rows for each value of <code>XI</code> in the \ncolumns.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Evaluation of the BSpline basis on these <code>XI</code> values : [0, 0.5, 1]</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"n\">BSplineBasis</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">N</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"go\">array([[1.  , 0.  , 0.  ],</span>\n<span class=\"go\">       [0.25, 0.5 , 0.25],</span>\n<span class=\"go\">       [0.  , 0.  , 1.  ]])</span>\n</code></pre>\n</div>\n\n<p>Evaluation of the 1st derivative of the BSpline basis on these <code>XI</code> \nvalues : [0, 0.5, 1]</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"n\">BSplineBasis</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">N</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">),</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"go\">array([[-2.,  2.,  0.],</span>\n<span class=\"go\">       [-1.,  0.,  1.],</span>\n<span class=\"go\">       [ 0., -2.,  2.]])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">XI</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis.plotN", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis.plotN", "kind": "function", "doc": "<p>Plots the basis functions over the span.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k</strong> (int, optional):\n<code>k</code>-th derivative of the BSpline ploted. The default is 0.</li>\n<li><strong>show</strong> (bool, optional):\nShould the plot be displayed ? The default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis.knotInsertion", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis.knotInsertion", "kind": "function", "doc": "<p>Performs the knot insersion process on the <code>BSplineBasis</code> instance and \nreturns the <code>D</code> matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>knots_to_add</strong> (numpy.array of float):\nArray of knots to append to the knot vector.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>D</strong> (scipy.sparse.coo_matrix of float):\nThe matrix <code>D</code> such that :\nnewCtrlPtsCoordinate = <code>D</code> @ ancientCtrlPtsCoordinate.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Insert the knots [0.5, 0.5] to the <code>BSplineBasis</code> instance \nand return the operator to apply on the control points.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"n\">BSplineBasis</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">knotInsertion</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"go\">array([[1.  , 0.  , 0.  ],</span>\n<span class=\"go\">       [0.5 , 0.5 , 0.  ],</span>\n<span class=\"go\">       [0.25, 0.5 , 0.25],</span>\n<span class=\"go\">       [0.  , 0.5 , 0.5 ],</span>\n<span class=\"go\">       [0.  , 0.  , 1.  ]])</span>\n</code></pre>\n</div>\n\n<p>The knot vector is modified (as well as n and m) :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">knot</span>\n<span class=\"go\">array([0. , 0. , 0. , 0.5, 0.5, 1. , 1. , 1. ])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">knots_to_add</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.b_spline_basis.BSplineBasis.orderElevation", "modulename": "bsplyne.b_spline_basis", "qualname": "BSplineBasis.orderElevation", "kind": "function", "doc": "<p>Performs the order elevation algorithm on the basis and return a \nlinear transformation to apply on the control points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong> (int):\nNew degree of the B-spline basis will be its current degree plus <code>t</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>STD</strong> (scipy.sparse.coo_matrix of float):\nThe matrix <code>STD</code> such that :\nnewCtrlPtsCoordinate = <code>STD</code> @ ancientCtrlPtsCoordinate.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Elevate the orderof the <code>BSplineBasis</code> instance by 1 and return the operator \nto apply on the control points.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span> <span class=\"o\">=</span> <span class=\"n\">BSplineBasis</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">orderElevation</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"go\">array([[1.        , 0.        , 0.        ],</span>\n<span class=\"go\">       [0.33333333, 0.66666667, 0.        ],</span>\n<span class=\"go\">       [0.        , 0.66666667, 0.33333333],</span>\n<span class=\"go\">       [0.        , 0.        , 1.        ]])</span>\n</code></pre>\n</div>\n\n<p>The knot vector and the degree are modified (as well as n and m) :</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">knot</span>\n<span class=\"go\">array([0., 0., 0., 0., 1., 1., 1., 1.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">p</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D", "modulename": "bsplyne.geometries_in_3D", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bsplyne.geometries_in_3D.new_quarter_circle", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_quarter_circle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">normal</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_circle", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_circle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">normal</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_disk", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_disk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">normal</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_degenerated_disk", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_degenerated_disk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">normal</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_quarter_pipe", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_quarter_pipe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_pipe", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_pipe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_quarter_cylinder", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_quarter_cylinder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_cylinder", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_cylinder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_degenerated_cylinder", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_degenerated_cylinder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_closed_circle", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_closed_circle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">normal</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_closed_disk", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_closed_disk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">normal</span>, </span><span class=\"param\"><span class=\"n\">radius</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_closed_pipe", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_closed_pipe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_closed_cylinder", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_closed_cylinder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_quarter_strut", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_quarter_strut", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center_front</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.geometries_in_3D.new_cube", "modulename": "bsplyne.geometries_in_3D", "qualname": "new_cube", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">orientation</span>, </span><span class=\"param\"><span class=\"n\">side_length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline", "modulename": "bsplyne.multi_patch_b_spline", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity", "kind": "class", "doc": "<p>Contains all the methods to link multiple B-spline patches.\nIt uses 3 representations of the data : </p>\n\n<ul>\n<li>a unique representation, possibly common with other meshes, containing \nonly unique nodes indices, </li>\n<li>a unpacked representation containing duplicated nodes indices, </li>\n<li>a separated representation containing duplicated nodes indices, \nseparated between patches. It is here for user friendliness.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>unique_nodes_inds</strong> (numpy.ndarray of int):\nThe indices of the unique representation needed to create the unpacked one.</li>\n<li><strong>shape_by_patch</strong> (numpy.ndarray of int):\nThe shape of the separated nodes by patch.</li>\n<li><strong>nb_nodes</strong> (int):\nThe total number of unpacked nodes.</li>\n<li><strong>nb_unique_nodes</strong> (int):\nThe total number of unique nodes.</li>\n<li><strong>nb_patchs</strong> (int):\nThe number of patches.</li>\n<li><strong>npa</strong> (int):\nThe dimension of the parametric space of the B-splines.</li>\n</ul>\n"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.__init__", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>unique_nodes_inds</strong> (numpy.ndarray of int):\nThe indices of the unique representation needed to create the unpacked one.</li>\n<li><strong>shape_by_patch</strong> (numpy.ndarray of int):\nThe shape of the separated nodes by patch.</li>\n<li><strong>nb_unique_nodes</strong> (int):\nThe total number of unique nodes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unique_nodes_inds</span>, </span><span class=\"param\"><span class=\"n\">shape_by_patch</span>, </span><span class=\"param\"><span class=\"n\">nb_unique_nodes</span></span>)</span>"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.from_nodes_couples", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.from_nodes_couples", "kind": "function", "doc": "<p>Create the connectivity from a list of couples of unpacked nodes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nodes_couples</strong> (numpy.ndarray of int):\nCouples of indices of unpacked nodes that are considered the same.\nIts shape should be (# of couples, 2)</li>\n<li><strong>shape_by_patch</strong> (numpy.ndarray of int):\nThe shape of the separated nodes by patch.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MultiPatchBSplineConnectivity</strong>: Instance of <code>MultiPatchBSplineConnectivity</code> created.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">nodes_couples</span>, </span><span class=\"param\"><span class=\"n\">shape_by_patch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.from_separated_ctrlPts", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.from_separated_ctrlPts", "kind": "function", "doc": "<p>Create the connectivity from a list of control points given as \na separated field by comparing every couple of points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>separated_ctrlPts</strong> (list of numpy.ndarray of float):\nControl points of every patch to be compared in the separated \nrepresentation. Every array is of shape : \n(<code>NPh</code>, nb elem for dim 1, ..., nb elem for dim <code>npa</code>)</li>\n<li><strong>eps</strong> (float, optional):\nMaximum distance between two points to be considered the same, by default 1e-10</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>MultiPatchBSplineConnectivity</strong>: Instance of <code>MultiPatchBSplineConnectivity</code> created.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">separated_ctrlPts</span>, </span><span class=\"param\"><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.unpack", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.unpack", "kind": "function", "doc": "<p>Extract the unpacked representation from a unique representation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>unique_field</strong> (numpy.ndarray):\nThe unique representation. Its shape should be :\n(field, shape, ..., <code>self</code>.<code>nb_unique_nodes</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>unpacked_field</strong> (numpy.ndarray):\nThe unpacked representation. Its shape is :\n(field, shape, ..., <code>self</code>.<code>nb_nodes</code>)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unique_field</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.pack", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.pack", "kind": "function", "doc": "<p>Extract the unique representation from an unpacked representation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>unpacked_field</strong> (numpy.ndarray):\nThe unpacked representation. Its shape should be :\n(field, shape, ..., <code>self</code>.<code>nb_nodes</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>unique_nodes</strong> (numpy.ndarray):\nThe unique representation. Its shape is :\n(field, shape, ..., <code>self</code>.<code>nb_unique_nodes</code>)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unpacked_field</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.separate", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.separate", "kind": "function", "doc": "<p>Extract the separated representation from an unpacked representation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>unpacked_field</strong> (numpy.ndarray):\nThe unpacked representation. Its shape is :\n(field, shape, ..., <code>self</code>.<code>nb_nodes</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>separated_field</strong> (list of numpy.ndarray):\nThe separated representation. Every array is of shape : \n(field, shape, ..., nb elem for dim 1, ..., nb elem for dim <code>npa</code>)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unpacked_field</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.agglomerate", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.agglomerate", "kind": "function", "doc": "<p>Extract the unpacked representation from a separated representation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>separated_field</strong> (list of numpy.ndarray):\nThe separated representation. Every array is of shape : \n(field, shape, ..., nb elem for dim 1, ..., nb elem for dim <code>npa</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>unpacked_field</strong> (numpy.ndarray):\nThe unpacked representation. Its shape is :\n(field, shape, ..., <code>self</code>.<code>nb_nodes</code>)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">separated_field</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.unique_field_indices", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.unique_field_indices", "kind": "function", "doc": "<p>Get the unique, unpacked or separated representation of a field's unique indices.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>field_shape</strong> (tuple of int):\nThe shape of the field. For example, if it is a vector field, <code>field_shape</code> \nshould be (3,). If it is a second order tensor field, it should be (3, 3).</li>\n<li><strong>representation</strong> (str, optional):\nThe user must choose between <code>\"unique\"</code>, <code>\"unpacked\"</code>, and <code>\"separated\"</code>.\nIt corresponds to the type of representation to get, by default \"separated\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>unique_field_indices</strong> (numpy.ndarray of int or list of numpy.ndarray of int):\nThe unique, unpacked or separated representation of a field's unique indices.\nIf unique, its shape is (<em><code>field_shape</code>, <code>self</code>.<code>nb_unique_nodes</code>).\nIf unpacked, its shape is : (</em><code>field_shape</code>, <code>self</code>.<code>nb_nodes</code>).\nIf separated, every array is of shape : (*<code>field_shape</code>, nb elem for dim 1, ..., nb elem for dim <code>npa</code>).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">field_shape</span>, </span><span class=\"param\"><span class=\"n\">representation</span><span class=\"o\">=</span><span class=\"s1\">&#39;separated&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.get_duplicate_unpacked_nodes_mask", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.get_duplicate_unpacked_nodes_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.extract_exterior_borders", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.extract_exterior_borders", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">splines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.subset", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.subset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">splines</span>, </span><span class=\"param\"><span class=\"n\">patches_to_keep</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSplineConnectivity.save_paraview", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSplineConnectivity.save_paraview", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">splines</span>,</span><span class=\"param\">\t<span class=\"n\">separated_ctrl_pts</span>,</span><span class=\"param\">\t<span class=\"n\">path</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">n_step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_eval_per_elem</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">unique_fields</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">separated_fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder.__init__", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">spline1_inds</span>,</span><span class=\"param\">\t<span class=\"n\">spline2_inds</span>,</span><span class=\"param\">\t<span class=\"n\">axes1</span>,</span><span class=\"param\">\t<span class=\"n\">axes2</span>,</span><span class=\"param\">\t<span class=\"n\">front_sides1</span>,</span><span class=\"param\">\t<span class=\"n\">front_sides2</span>,</span><span class=\"param\">\t<span class=\"n\">transpose_2_to_1</span>,</span><span class=\"param\">\t<span class=\"n\">flip_2_to_1</span>,</span><span class=\"param\">\t<span class=\"n\">NPa</span></span>)</span>"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder.extract_border_pts", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder.extract_border_pts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">field</span>, </span><span class=\"param\"><span class=\"n\">axis</span>, </span><span class=\"param\"><span class=\"n\">front_side</span>, </span><span class=\"param\"><span class=\"n\">field_dim</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder.transpose_and_flip", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder.transpose_and_flip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">field</span>, </span><span class=\"param\"><span class=\"n\">transpose</span>, </span><span class=\"param\"><span class=\"n\">flip</span>, </span><span class=\"param\"><span class=\"n\">field_dim</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder.transpose_and_flip_knots", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder.transpose_and_flip_knots", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">knots</span>, </span><span class=\"param\"><span class=\"n\">spans</span>, </span><span class=\"param\"><span class=\"n\">transpose</span>, </span><span class=\"param\"><span class=\"n\">flip</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder.from_splines", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder.from_splines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">separated_ctrl_pts</span>, </span><span class=\"param\"><span class=\"n\">splines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder.get_connectivity", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder.get_connectivity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shape_by_patch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.CouplesBSplineBorder.get_borders_couples", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "CouplesBSplineBorder.get_borders_couples", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">separated_field</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSpline", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSpline", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSpline.__init__", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSpline.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">splines</span>, </span><span class=\"param\"><span class=\"n\">connectivity</span></span>)</span>"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSpline.get_border", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSpline.get_border", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSpline.move_border", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSpline.move_border", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSpline.save_paraview", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSpline.save_paraview", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">separated_ctrl_pts</span>,</span><span class=\"param\">\t<span class=\"n\">path</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">n_step</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_eval_per_elem</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">unique_fields</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">separated_fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bsplyne.multi_patch_b_spline.MultiPatchBSpline.save_stl", "modulename": "bsplyne.multi_patch_b_spline", "qualname": "MultiPatchBSpline.save_stl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();